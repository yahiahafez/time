{
  "_args": [
    [
      {
        "raw": "stripe-as-promised@~2.0.0",
        "scope": null,
        "escapedName": "stripe-as-promised",
        "name": "stripe-as-promised",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/home/sara/Pictures/sprint 3/node_modules/angular-stripe"
    ]
  ],
  "_from": "stripe-as-promised@>=2.0.0 <2.1.0",
  "_id": "stripe-as-promised@2.0.0",
  "_inCache": true,
  "_location": "/stripe-as-promised",
  "_nodeVersion": "2.1.0",
  "_npmUser": {
    "name": "bendrucker",
    "email": "bvdrucker@gmail.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stripe-as-promised@~2.0.0",
    "scope": null,
    "escapedName": "stripe-as-promised",
    "name": "stripe-as-promised",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular-stripe"
  ],
  "_resolved": "https://registry.npmjs.org/stripe-as-promised/-/stripe-as-promised-2.0.0.tgz",
  "_shasum": "301bc6fce9df3573630c28afa68406578605e49e",
  "_shrinkwrap": null,
  "_spec": "stripe-as-promised@~2.0.0",
  "_where": "/home/sara/Pictures/sprint 3/node_modules/angular-stripe",
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com",
    "url": "http://www.bendrucker.me/"
  },
  "bugs": {
    "url": "https://github.com/bendrucker/stripe-as-promised/issues"
  },
  "dependencies": {
    "dot-prop": "~2.1.0",
    "xtend": "~4.0.0"
  },
  "description": "Wrap Stripe.js async methods to return promises",
  "devDependencies": {
    "native-promise-only": "~0.7.8-a",
    "phantomjs": "~1.9.17",
    "sinon": "~1.14.1",
    "stripe-debug": "^2.0.0",
    "tape": "~4.0.0",
    "zuul": "~3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "301bc6fce9df3573630c28afa68406578605e49e",
    "tarball": "https://registry.npmjs.org/stripe-as-promised/-/stripe-as-promised-2.0.0.tgz"
  },
  "files": [
    "index.js",
    "readme.md"
  ],
  "gitHead": "3d35f28bc2ef2e1790957177e60e86c616df4bdf",
  "homepage": "https://github.com/bendrucker/stripe-as-promised",
  "keywords": [
    "stripe",
    "payments",
    "promise",
    "async",
    "callback"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bendrucker",
      "email": "bvdrucker@gmail.com"
    }
  ],
  "name": "stripe-as-promised",
  "optionalDependencies": {},
  "readme": "# stripe-as-promised [![Build Status](https://travis-ci.org/bendrucker/stripe-as-promised.svg?branch=master)](https://travis-ci.org/bendrucker/stripe-as-promised)\n\n> Wrap [Stripe.js](https://stripe.com/docs/stripe.js)'s asynchronous methods to return promises instead of calling callbacks.\n\n## Installing\n\n```sh\n# npm\n$ npm install stripe-as-promised\n```\n\n## API\n\n#### `stripeAsPromised(Stripe, Promise)` -> `promisifedStripe`\n\n##### Stripe\n\n*Required*  \nType: `function`\n\nThe Stripe.js library\n\n##### Promise\n\n*Required*  \nType: `function`\n\nA Promise constructor\n\nThe returned promisified object promisifes the following methods in addition to exposing utility methods:\n\n* [`card.createToken`](https://stripe.com/docs/stripe.js#card-createToken)\n* [`bankAccount.createToken`](https://stripe.com/docs/stripe.js#bank-account-createToken)\n* [`bitcoinReceiver.createReceiver`](https://stripe.com/docs/stripe.js#bitcoinreceiver-createreceiver)\n* [`bitcoinReceiver.pollReceiver`](https://stripe.com/docs/stripe.js#bitcoinreceiver-pollreceiver)\n* `bitcoinReceiver.getReceiver` (undocumented)\n\n\n## Usage\n\n### Example\n\nBelow is an abbreviated version of Stripe's [documented example for creating a token](https://stripe.com/docs/stripe.js#collecting-card-details):\n\n```js\n// card === {number: '42...', ...}\nStripe.card.createToken(card, stripeResponseHandler);\n\nfunction stripeResponseHandler(status, token) {\n  if (token.error) {\n    console.error('Tokenization failed');\n  } else {\n    console.log('Created token', token.id);\n  }\n}\n```\n\nThe same logic with stripe-as-promised would be written as:\n\n```js\nvar stripe = stripeAsPromised(Stripe, Promise);\n\nstripe.card.createToken(card)\n  .then(function (token) {\n    console.log('Created token', token.id);\n  })\n  .catch(function (err) {\n    console.error(err);\n  });\n```\n\n### Bitcoin\n\nFor handling bitcoin transactions, you'll probably want to avoid using the `pollReceiver` method as-is. `cancelReceiverPoll` does not notify the callback passed to `pollReceiver` of the cancellation, so the following code could result in a promise that never resolves:\n\n```js\nstripe.bitcoinReceiver.createReceiver(payment)\n  .then(function (receiver) {\n    return stripe.bitcoinReceiver.pollReceiver(receiver.id);\n  })\n  .then(function (receiver) {\n    console.log('Payment received!');\n  })\n  .catch(function (err) {\n    console.error('Payment error', err);\n  });\n```\n\nIf the receiver is never filled, neither statement is printed. In your application, you'll probably want to implement your own polling implementation that treats cancellations as errors that can be caught and handled downstream.\n\n## License\n\nMIT Â© [Ben Drucker](http://bendrucker.me)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bendrucker/stripe-as-promised.git"
  },
  "scripts": {
    "test": "zuul --phantom -- test.js"
  },
  "version": "2.0.0"
}
